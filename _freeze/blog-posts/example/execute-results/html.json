{
  "hash": "17d78253718822f90acd13ba74ca3024",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Laying out figures with ggplot2'\ndate: '02-12-2024'\ncategories: ['Example', 'ggplot2']\ndescription: 'This is a test post. In this post, I try out different functionalities in the hope of making a template.'\nexecute:\n  # eval\t# Evaluate the code chunk (if false, just shows the code in the output)\n  # echo \t# Include the source code in output\n  output: true # \tInclude the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quartoâ€™s standard enclosing markdown)\n  message: false\n  warning: false # Include warnings in the output\n  error: false # Include errors in the output (note that this implies that errors executing code will not halt processing of the document).\n  # include: # Catch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n  # code-overflow: wrap\neditor_options: \n  chunk_output_type: inline\nknitr:\n  opts_chunk: \n    fig.align: \"center\"\n    fig-width: 8\n    fig-asp: 0.75\n    code-overflow: wrap\ntoc: true\n---\n\n\n# Setup\n\n## Why?\n\n1.   Previously was using a combination of R, Powerpoint, and Latex to lay out figures.\n2.   However, it was a very finicking process. If I'm going to be using Quarto/R for most things would be nice to do things all in one place.\n3.   I really want to enable other students/academics to do things without reinventing the wheel.\n\nI like to use `pacman` (the package manager) because its function `p_load` acts like `library()` if the package is already installed and `install.packages()` if it isn't. You can also pass all your package names to it as a single vector. \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}