{
  "hash": "0d8bc16bbd4a5e8e38c057425576fee6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Laying out figures with ggplot2'\ndate: '02-12-2024'\ncategories: ['Example', 'ggplot2']\ndescription: 'This is a test post. In this post, I try out different functionalities in the hope of making a template.'\nexecute:\n  # eval\t# Evaluate the code chunk (if false, just shows the code in the output)\n  # echo \t# Include the source code in output\n  output: true # \tInclude the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quartoâ€™s standard enclosing markdown)\n  message: false\n  warning: false # Include warnings in the output\n  error: false # Include errors in the output (note that this implies that errors executing code will not halt processing of the document).\n  # include: # Catch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n  # code-overflow: wrap\neditor_options: \n  chunk_output_type: inline\nknitr:\n  opts_chunk: \n    fig.align: \"center\"\n    fig-width: 8\n    fig-asp: 0.75\n    code-overflow: wrap\ntoc: true\n---\n\n\n# Setup\n\n## Why?\n\n::: ol\n1.   Previously was using a combination of R, Powerpoint, and Latex to lay out figures.\n2.   However, it was a very finicking process. If I'm going to be using Quarto/R for most things would be nice to do things all in one place.\n3.   I really want to enable other students/academics to do things without reinventing the wheel.\n:::\n\nI like to use `pacman` (the package manager) because its function `p_load` acts like `library()` if the package is already installed and `install.packages()` if it isn't. You can also pass all your package names to it as a single vector. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\ninstall.packages(\"pacman\", repos=\"https://cran.r-project.org\", update = TRUE)\n\n# Basic plotting packages\npacman::p_load(\"ggplot2\", update = TRUE)\n\n# All the packages we need for laying out plots\npacman::p_load(\"grid\", \"gridExtra\", \"gtable\", \"cowplot\", \"multipanelfigure\", \"egg\", \"patchwork\", update = TRUE)\n\n# Extra stuff\npacman::p_load(\"ggpubr\", \"ggplotify\", \"tidyverse\", update = TRUE)\n```\n:::\n\n\nSo these are the packages I want to compare. A lot of the inspiration for this work came from the `egg` vignettes ([here](https://cran.r-project.org/web/packages/egg/vignettes/Ecosystem.html) and [here](https://cran.r-project.org/web/packages/egg/vignettes/Overview.html)), so make sure to check those out if you want further information. \n\n| Package | Version | Function(s) | Compatible with `ggsave()` | Alignment |\n|------                 |------                                  |------                   |------ |------ |\n| [r cookbook (`grid`)](http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/){.external target=\"_blank\"}   | 4.3.0    | `multiplot`    | no    | no    |\n| [`gridExtra`](https://cran.r-project.org){.external target=\"_blank\"}   | 2.3   | `grid.arrange`          | yes   | no    |\n| [`gtable`](https://cran.r-project.org){.external target=\"_blank\"}    | 0.3.4    | `multi_panel_figure`    | yes   | yes   |\n| [`cowplot`](https://cran.r-project.org){.external target=\"_blank\"}   | 1.1.3   | `plot_grid`             | yes\\* | yes\\* |\n| [`multipanelfigure`](https://cran.r-project.org){.external target=\"_blank\"}    | 2.1.5 | `multi_panel_figure`    | yes   | yes   |\n| [`egg`](https://cran.r-project.org/web/packages/egg/vignettes/Overview.html){.external target=\"_blank\"}   | 0.4.5              | `ggarrange`             | yes   | yes   |\n| [`patchwork`](https://cran.r-project.org){.external target=\"_blank\"}   | 1.2.0        | `plot_layout`           | yes   | yes   |\n\n::: {.p style=\"margin: 1em\"}\n \n:::\n\nFirst I'm going to set up a dummy plot that will act as our tester going forward. I'm deliberately going to make it pretty complex to make sure I can demonstrate all the features we might want. I'll be using data from the Bureau of Meteorology that I downloaded and cleaned up. The data I used is available [here](resources/melbourne_weather_times.csv), and if you want to generate a similar dataset the code I used is [here](/resources/code-to-clean-weather-data.R).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\np.temp.9am = \n  ggplot(data = subset(weather.times, Time == \"Morning\"), \n         aes(x = Date, y = Temp.C, color = WindDir, shape = Time)) +\n  geom_point() + \n  scale_x_date(name = \"Month\", date_labels = \"%b\") +\n  theme_classic() + theme(legend.position = \"none\")\n\np.temp.3pm = \n  ggplot(data = subset(weather.times, Time == \"Morning\"), \n         aes(x = Date, y = Temp.C, color = WindDir, shape = Time)) +\n  geom_point() + \n  scale_x_date(name = \"Month\", date_labels = \"%b\") +\n  theme_classic() + theme(legend.position = \"none\")\n```\n:::\n\n\n## Basics\n\nLaying two plots out, side by side, is easy with basically any of these packages. The most basic way is probably with the confusingly named custom function `multiplot`, which is built in base packages and defined in [R Cookbook](http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/){.external target=\"_blank\"}.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\nmultiplot(p.temp.9am, p.temp.3pm, cols = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/grid multiplot-1.png){fig-align='center' width=768}\n:::\n:::\n\n\nYou can also achieve the same thing with functions already built into the packages `gridExtra`, `ggpubr` and `egg`, which are built on top of the basic `grid` package:\n\n\n\n\n\n::: d-grid\n::: {.row style=\"display:flex; width:100%;\"}\n::: col\n#### gridExtra\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\ngridExtra::grid.arrange(\n  p.temp.9am, p.temp.3pm, \n  nrow = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/basic gridExtra-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n::: col\n#### ggpubr\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\nggpubr::ggarrange(\n  p.temp.9am, p.temp.3pm, \n  nrow = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/basic ggpubr-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n::: col\n#### egg\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\negg::ggarrange(\n  p.temp.9am, p.temp.3pm, \n  nrow = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/basic egg-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n:::\n:::\n\nHowever, have a look at the figures above. Doesn't it bother you that the axis titles, labels and tick-marks are repeated over multiple figures? It bothers me. \nIt especially bothers me when I'm trying to squeeze a lot of information into one page. Repeated information isn't just redundant, it's actively detrimental to your audience's understanding of your data. Personally, if I was going to plot those two figures together in a paper, I would remove their common axis (y if they're side-by-side, x if they're stacked). \n\n## Adjustments for subfigures\n\nThe simplest way to do achieve this is to remove the offending elements from the plots themselves. I like to do this with theme environment shortcuts, which take advantage of `ggplot2`'s modular structure and can make your code a lot less verbose. For example:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\nno.x = theme(axis.title.x = element_blank(), axis.text.x = element_blank())\nno.y = theme(axis.title.y = element_blank(), axis.text.y = element_blank())\n```\n:::\n\n\nYou can then plot your figures much more neatly, and you'll get exactly the same results using `gridExtra::grid.arrange` and `ggpubr::ggarrange`. However, you'll get a different result when you use `egg::ggarrange`, and in fact `egg::ggarrange` is slightly superior in this regard. It might be easier to see if we switch away from the actual plot and look at the \"bones\":\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\nlemme_see_dem_bones = function(plot){\n  bonegrob = egg::expose_layout(plot, draw = F)\n  boneplot = ggpubr::as_ggplot(bonegrob)\n  return(boneplot)\n}\n\n# Functions ggpubr::as_ggplot() ggplotify::as.ggplot()\n```\n:::\n\n\n`expose_layout` allows you to see how the different plot elements are being parsed by whatever package you're using. \n\n::: d-grid\n::: {.row style=\"display:flex; width:100%;\"}\n#### gridExtra\n::: col\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\ngridExtra::grid.arrange(\n  p.temp.9am + no.x, \n  p.temp.3pm, \n  nrow = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/basic gridExtra 2-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n\n::: col\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\ngridExtra::grid.arrange(\n  lemme_see_dem_bones(p.temp.9am + no.x), \n  lemme_see_dem_bones(p.temp.3pm), \n  nrow = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/basic gridExtra bones-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n\n:::\n\n::: {.row style=\"display:flex; width:100%;\"}\n\n#### ggpubr\n::: col\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\nggpubr::ggarrange(\n  p.temp.9am + no.x, \n  p.temp.3pm, \n  nrow = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/basic ggpubr 2-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n\n::: col\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\nggpubr::ggarrange(\n  lemme_see_dem_bones(p.temp.9am + no.x), \n  lemme_see_dem_bones(p.temp.3pm), \n  nrow = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/basic ggpubr bones-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n\n:::\n\n::: {.row style=\"display:flex; width:100%;\"}\n#### egg\n::: col\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\negg::ggarrange(\n  p.temp.9am + no.x, \n  p.temp.3pm, \n  nrow = 2)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/basic egg 2-1.png){fig-align='center' width=768}\n:::\n:::\n\n:::\n\n::: col\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\neg = egg::ggarrange(\n  p.temp.9am + no.x, \n  p.temp.3pm, \n  nrow = 2)\n\nexpose_layout(eg)\n```\n:::\n\n:::\n:::\n:::\n\nYou might have already noticed some problems with this approach. For one thing, it's pretty finicky and a bit of a time-trap. You're essentially manually removing bits of each plot to fit the image in your head, and before you know it you'll have spent 6 hours trying to get a figure to look right. \nFor another, the sub-figures above are actually slightly different sizes. The axes titles take up part of the plot area allotted to each sub-figure, so removing them causes the rest of the plot area to expand to fill it. Not ideal.\n\nEven worse, it's standard practice to label subfigures within the plot area. \ngrid.arrange is a little too simple function, but the two `ggarrange` functions (in `egg` and `ggpubr`) will do it for you pretty easily. However, they are not flexible about where those labels are placed within the plot area, and this is especially obvious when illustrating with a 4-panel figure:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\n# WH = c(4, 3)\n\n# egg::ggarrange(\n#   ggplotify::as.ggplot(\n#     egg::set_panel_size(p.temp.9am + no.x, width = unit(WH[1], \"in\"), height = unit(WH[2], \"in\"))\n#     ),\n#   ggplotify::as.ggplot(\n#     egg::set_panel_size(p.temp.9am + no.x + no.y, width = unit(WH[1], \"in\"), height = unit(WH[2], \"in\"))\n#     ),\n#   ggplotify::as.ggplot(\n#     egg::set_panel_size(p.temp.3pm, width = unit(WH[1], \"in\"), height = unit(WH[2], \"in\"))\n#     ),\n#   ggplotify::as.ggplot(\n#     egg::set_panel_size(p.temp.3pm + no.y, width = unit(WH[1], \"in\"), height = unit(WH[2], \"in\"))\n#     ),\n#   nrow = 2, ncol = 2, labels = c(\"A\", \"B\", \"C\", \"D\"))\n\negg::ggarrange(p.temp.9am + no.x, \n               p.temp.9am + no.x + no.y, \n               p.temp.3pm, \n               p.temp.3pm + no.y, \n               ncol = 2, nrow = 2,\n               widths = c(1, 1), heights = c(1, 1), \n               labels = c(\"A\", \"B\", \"C\", \"D\"),\n               label.args = list(gp = gpar(fontfamily = \"sans\", \n                                           fontsize = 12, fontface = \"bold\"), \n                                 x = unit(1.95, \"cm\"), vjust = 1, hjust = 1), \n               draw = T)\n```\n\n::: {.cell-output-display}\n![](example-blog-post_files/figure-html/4 panels with labels-1.png){fig-align='center' width=960}\n:::\n:::\n\nEw.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\ngtab = gtable_matrix(name = NULL,\n                     grobs = matrix(list(grob.1, grob.1), nrow = 1), \n                     widths = unit(c(1, 1), \"null\"), \n                     heights = unit(1, \"null\"))\n\ng1 = expose_layout(dummy.1) \n\ngtab = gtable_matrix(name = NULL, \n                     grobs = matrix(list(g1, g1), nrow = 1), \n                     widths = unit(c(1, 1), \"null\"), \n                     heights = unit(1, \"null\"))\n\ngrid.draw(gtab)\n```\n:::\n\n\n\n# grob.1 = ggplotGrob(p.temp.9am) # Default plot as a grob\n\n## Create ggplot from grob\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\nggplotify::as.ggplot(g1)\n\negg::ggarrange(ggplotify::as.ggplot(g1), ggplotify::as.ggplot(g1), nrow = 1)\n```\n:::\n\n\n## The egg package\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code .code-overflow-wrap}\n# https://cran.r-project.org/web/packages/egg/vignettes/Ecosystem.html\n\nlayout_matrix = rbind(c(1, 2, 3), c(1, 4, 4))\n\negg::ggarrange(ggplot(), ggplot(), ggplot(), ggplot(), \n               # ncol = 3, nrow = 2, \n               widths = c(1, 1, 1, 2), heights = c(2, 1, 1, 1), \n               labels = c(\"A\", \"B\", \"C\", \"D\"),\n               label.args = list(gp = gpar(fontfamily = \"sans\", \n                                           fontsize = 12, fontface = \"bold\"), \n                                 x = unit(1.95, \"cm\"), vjust = 1, hjust = 1), \n               draw = T)\n\ng1 = gtable_frame(ggplotGrob(ggplot()), width = unit(1, \"null\"), height = unit(2, \"null\"), debug = TRUE)\ng2 = gtable_frame(ggplotGrob(ggplot()), width = unit(1, \"null\"), height = unit(1, \"null\"), debug = TRUE)\ng3 = gtable_frame(ggplotGrob(ggplot()), width = unit(1, \"null\"), height = unit(1, \"null\"), debug = TRUE)\ng4 = gtable_frame(ggplotGrob(ggplot()), width = unit(2, \"null\"), height = unit(1, \"null\"), debug = TRUE)\n\ng23 = gtable_frame(gtable_cbind(gtable_frame(ggplotGrob(ggplot())), \n                                gtable_frame(ggplotGrob(ggplot()))), \n                   width = unit(2, \"null\"), height = unit(1, \"null\"))\ng234 = gtable_frame(gtable_rbind(g23, \n                                 gtable_frame(ggplotGrob(ggplot()))), \n                    width = unit(2, \"null\"), height = unit(2, \"null\"))\ngcomb = gtable_frame(gtable_cbind(gtable_frame(ggplotGrob(ggplot())),\n                                  g234),\n                     width = unit(3, \"null\"), height = unit(2, \"null\"))\n\ngrid.newpage()\ngrid.draw(gcomb)\n```\n:::\n",
    "supporting": [
      "example-blog-post_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}